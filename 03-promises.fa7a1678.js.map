{"mappings":"AA0BcA,SAASC,cAAc,SAArC,MACMC,EAAUF,SAASC,cAAc,uBACjCE,EAASH,SAASC,cAAc,sBAChCG,EAAWJ,SAASC,cAAc,wBAIxC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAGtCC,YAAW,KACLH,EAEFF,EAAQ,C,SAAEH,E,MAAUC,IAGpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAwBbQ,OAAOC,iBAAiB,UAlBxB,SAAsBC,GACpBA,EAAMC,iBACN,IAAIC,EAAaC,OAAOlB,EAAQmB,OAEhC,IAAK,IAAIC,EAAE,EAAGA,GAAKlB,EAASiB,MAAOC,IACjCjB,EAAciB,EAAGH,GACdI,MAAK,EAACjB,SAAEA,EAAQC,MAAEA,MACjBiB,OAAOC,QAAQ,sBAAsBnB,QAAeC,MAAU,IAE/DmB,OAAM,EAACpB,SAAEA,EAAQC,MAAEA,MAClBiB,OAAOG,QAAQ,oBAAoBrB,QAAeC,MAAU,IAG9DY,GAAcC,OAAOjB,EAAOkB,M","sources":["src/js/03-promises.js"],"sourcesContent":["// 1. Import Notify from 'notiflix/notify-aio' for displaying notifications\n\n// 2. Select and store form and its input elements (delay, step, amount) from the DOM\n\n// 3. Define function createPromise with parameters position and delay\n//     3.1 Create a new Promise\n//     3.2 Determine randomly whether the promise should resolve or reject\n//     3.3 Use setTimeout to simulate asynchronous operation\n//         - After the specified delay, either resolve or reject the promise\n//         - Resolve with an object containing position and delay if shouldResolve is true\n//         - Reject with the same object if shouldResolve is false\n\n// 4. Define function handleSubmit to handle form submission\n//     4.1 Prevent the default form submission behavior\n//     4.2 Initialize delayValue with the numerical value of delay input\n//     4.3 Iterate from 1 to the value of amount input\n//         - For each iteration, call createPromise with current iteration as position and delayValue as delay\n//         - Upon promise fulfillment, display a success notification with position and delay\n//         - Upon promise rejection, display a failure notification with position and delay\n//         - Increment delayValue by the numerical value of step input for the next iteration\n\n// 5. Attach an event listener to the form for the 'submit' event, calling handleSubmit on submission\n\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// // DOM LINKS\nconst forE1 = document.querySelector('.form');\nconst delayE1 = document.querySelector('input[name=\"delay\"]');\nconst stepE1 = document.querySelector('input[name=\"step\"]');\nconst amountE1 = document.querySelector('input[name=\"amount\"]');\n\n//--------------------------\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    // async operation\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }  \n    }, delay);\n  });\n}\n\n//----------------------------\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  let delayValue = Number(delayE1.value);\n\n  for (let i=1; i <= amountE1.value; i++) {\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`Fullfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n\n      delayValue += Number(stepE1.value);\n      //delayvalue = delayValue + Number(stepE1.value)\n  }\n}\n\nformE1.addEventListener('submit', handleSubmit);\n\n\n"],"names":["document","querySelector","$47d4ff9957288465$var$delayE1","$47d4ff9957288465$var$stepE1","$47d4ff9957288465$var$amountE1","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","formE1","addEventListener","event","preventDefault","delayValue","Number","value","i","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.fa7a1678.js.map"}